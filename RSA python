from Crypto.PublicKey import RSA
from Crypto.Util.number import inverse

n = 28662417607063448876770247706225138211123077554667238236171422859743838206337122413483793506945452407976414042596439000157874955749714050378853090062143521589407554935078353791088876007529132970764497339556490918630117455375702873554995561080403950330111736023537827902660006596393944416877953420708665392545618908919204574498583383785032337983921860184231333315286680296284550902045106564910853666709338339056419706665574030196124442018437542119735494885728909717975205692643148276458521245624334891479234641267826886008741615504235580838154013594172182671360188549239999900452170235087382643416080303953133348581927
p = 169299786199107318532365195704017018962346694914885807217678247320475981173933463300675543740831211676945529369814849244224199398157336918991527315491479431075261555003882943564996391669040781667947646489457117397128930937090383136763628178374094313641915163217004356682186427639287945458232518559143995578927
q = 169299786199107318532365195704017018962346694914885807217678247320475981173933463300675543740831211676945529369814849244224199398157336918991527315491479431075261555003882943564996391669040781667947646489457117397128930937090383136763628178374094313641915163217004356682186427639287945458232518559143995589001
e = 65537

d = inverse(e, (p-1)*(q-1))
key = RSA.construct((n,e,d,p,q))
privateKey = key.export_key()
